name: Create vCluster
on:
  workflow_dispatch:
    inputs:
      cluster_name:
        description: Name for the cluster
        required: true
      namespace_name:
        description: Name for the namespace
        required: true
      host_name:
        description: Name of the host cluster to set the host context
        required: true
      kubernetes_version:
        description: Kubernetes version to use in vCluster (e.g. 1.27, 1.28)
        required: true
        default: "1.28"
      cpu:
        description: CPU limit for vCluster in millicores (e.g. 500)
        required: true
        default: 500
      memory:
        description: Memory limit for vCluster in Mi (e.g. 512)
        required: true
        default: 512
      storage:
        description: Persistent storage size in Gi (e.g. 10)
        required: true
        default: 10
      workflow_id:
        description: Temporal Workflow ID (optional)
        required: true
      signal_name:
        description: Temporal Signal Name (required if workflow_id is set)
        required: true
      signal_payload:
        description: Payload for the Temporal Signal (optional)
        required: true
jobs:
  deploy-vcluster:
    environment: aks
    runs-on: [self-hosted, Linux]
    defaults:
      run:
        shell: bash
    env:
      NAMESPACE_NAME: vcluster-${{ github.event.inputs.namespace_name }}
      HOST_CONTEXT: ${{ github.event.inputs.host_name }}
      CLUSTER_NAME: ${{ github.event.inputs.cluster_name }}
      KUBERNETES_VERSION: ${{ github.event.inputs.kubernetes_version }}
      CPU: ${{ github.event.inputs.cpu }}
      MEMORY: ${{ github.event.inputs.memory }}
      STORAGE: ${{ github.event.inputs.storage }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate and switch kube context
        run: |
          echo "Validating and switching to context: $HOST_CONTEXT"
          if ! kubectl config get-contexts -o name | grep -qx "$HOST_CONTEXT"; then
            echo "Context '$HOST_CONTEXT' not found in kubeconfig."
            echo "Available contexts:"
            kubectl config get-contexts -o name
            exit 1
          fi

          kubectl config use-context "$HOST_CONTEXT"
          echo "Switched to context: $(kubectl config current-context)"

      - name: Create vCluster with resource limits
        run: |
          helm upgrade --install "$CLUSTER_NAME" \
          --create-namespace \
          --set cluster_name="$CLUSTER_NAME" \
          --set namespace_name="$NAMESPACE_NAME" \
          --set kubernetes_version="$KUBERNETES_VERSION" \
          --set cluster_cpu="$CPU" \
          --set cluster_ram="$MEMORY" \
          --set cluster_storage="$STORAGE" \
          ./armada-vcluster

      - name: Wait for pods to be created and ready
        run: |
          echo "Waiting for pods to appear in namespace: $NAMESPACE_NAME..."

          # Wait for at least one pod to be created (timeout after 60s)
          for i in {1..30}; do
            pod_count=$(kubectl get pods -n "$NAMESPACE_NAME" --no-headers 2>/dev/null | wc -l)
            if [ "$pod_count" -gt 0 ]; then
              echo "$pod_count pod(s) found. Proceeding to check readiness..."
              break
            fi
            echo "No pods found yet. Retrying in 2s..."
            sleep 2
          done

      - name: Signal Temporal Workflow
        if: success()
        run: |
          # Build JSON body
          body=$(jq -n \
            --arg workflowId "${{ github.event.inputs.workflow_id }}" \
            --arg signalName "${{ github.event.inputs.signal_name }}" \
            --arg signalInput "${{ github.event.inputs.signal_payload }}" \
            '{workflowId: $workflowId, signalName: $signalName, signalInput: $signalInput}')

          # Send POST request
          curl -X POST http://localhost:8080/trigger-signal \
            -H "Content-Type: application/json" \
            -d "$body"